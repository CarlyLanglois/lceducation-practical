Diagnosing Error Messages
=========================

Syntax and runtime errors *always* produce an error message. Reading and understanding error messages is a crucial first step in fixing the bug.

**Error messages are your friend.** This idea can seem foreign to new programmers, because an error message is a signal that your program is broken. When we are working with a broken program, we might feel that we are failing, or that we do not fully understand the concepts at-hand. 

However, the reality is that *all* programmers, no matter how experienced, regularly make seemingly simple syntax mistakes. If you run your program and it produces and error message, your first reaction should be, "Great! My program has an error, but I have a helpful message to point me in the right direction to fix it."

Let's consider a small program with a couple of syntax errors.

.. admonition:: Example

   ::
   
      let name = Julie;
      console.log("Hello, name);

While you can likely spot one more more errors just by looking at the example, let's look at the error messages that would be produced by running it. 

A Syntax Error
--------------

Running the program first results in the message:

::

   /Users/chris/dev/sandbox/js/syntax.js:2
   console.log("Hello, name);
               ^^^^^^^^^^^^^^

   SyntaxError: Invalid or unexpected token
      at new Script (vm.js:85:7)
      at createScript (vm.js:266:10)
      at Object.runInThisContext (vm.js:314:10)
      at Module._compile (internal/modules/cjs/loader.js:698:28)
      at Object.Module._extensions..js (internal/modules/cjs/loader.js:749:10)
      at Module.load (internal/modules/cjs/loader.js:630:32)
      at tryModuleLoad (internal/modules/cjs/loader.js:570:12)
      at Function.Module._load (internal/modules/cjs/loader.js:562:3)
      at Function.Module.runMain (internal/modules/cjs/loader.js:801:12)
      at internal/main/run_main_module.js:21:11


While there is a lot of text in this message, the first few lines tell us everything that we need to understand the problem.

.. note:: Error messages may look slightly different depending on where you are running your code. For example, an error message produced by a program in a `repl.it <https://repl.it/>`_ editor may look slightly different from that produced by the same program in a Codio editor. These differences are minor and generally unimportant; the main cause of the error should be reported in the same way. 

The first portion identifies where in our code the error exists:

::

   console.log("Hello, name);
               ^^^^^^^^^^^^^^

For many simple syntax errors, we will quickly be able to spot the mistake once JavaScript points out its location to us.

If the error is still unapparent, then next line provides more information:

::

   SyntaxError: Invalid or unexpected token

This line identifies that actual issue that JavaScript found. It makes clear that we're dealing with a ``SyntaxError``, and it provides a message that describes the issue.

If you are scratching your head at the message, "Invalid or unexpected token," don't worry. Programming languages often report errors in ways that, while technically accurate, are not always easy to decipher at first glance. However, a second look at the line in question can help us make sense of this message.

::

   console.log("Hello, name);
               ^^^^^^^^^^^^^^

.. index:: ! token

JavaScript is telling us that in the area of ``"Hello, name);`` it encountered an invalid token. **Token** is a fancy word that means a symbol, variable, or other atomic element of a program. In this case, the invalid token is ``"Hello, name);``. JavaScript sees the double-quote character and expects a string. However, the string does not have a closing ``"``, making it invalid.

Fixing this error gives us the program:

.. sourcecode:: js

   let name = Julie;
   console.log("Hello", name);


Syntax Errors and Code Highlighting
-----------------------------------

.. index::
   single: syntax; highlighting

Most programs in which you are likely to write code will provide a feature known as **syntax highlighting**. Such code editors will highlight different types of tokens in different ways. For example, strings may be red, while variables may be green. This useful feature can help you quickly identify syntax errors visually. 

As an example, let's look at a screenshot of the code we have been working with in this section, from within an `editor at repl.it <https://repl.it/@launchcode/Syntax-Highlighting>`_.

.. figure:: figures/syntax-highlighting.png
   
   Screenshot of a program with two syntax errors

Notice that the string ``Hello`` is colored red, while *most* of the symbols are colored black. At the end of line 1, however, the final ``)`` and ``;`` are both red rather than black. Since we haven't closed the string, the editor assumes that these two symbols are *part of* the string. Since we expect such symbols to be black in this editor, the difference in color is a clue that something is wrong with our syntax.


A Runtime Error
---------------

If we run our program, we see that we have yet another error.

::

   Hello
   /Users/chris/dev/sandbox/js/syntax.js:1
   let name = Julie;
            ^

   ReferenceError: Julie is not defined
      at Object.<anonymous> (/Users/chris/dev/sandbox/js/syntax.js:1:74)
      at Module._compile (internal/modules/cjs/loader.js:738:30)
      at Object.Module._extensions..js (internal/modules/cjs/loader.js:749:10)
      at Module.load (internal/modules/cjs/loader.js:630:32)
      at tryModuleLoad (internal/modules/cjs/loader.js:570:12)
      at Function.Module._load (internal/modules/cjs/loader.js:562:3)
      at Function.Module.runMain (internal/modules/cjs/loader.js:801:12)
      at internal/main/run_main_module.js:21:11


We have a new error message, this time having to due with line 1 of our code. We didn't see this error before because the program never reached the execution phase. Due to the syntax error on line 2, it stopped during the parsing phase. Even though the current error appears *before* the original syntax error in the code, the syntax error was reported first.

Once again, we are told where the error occurs:

::

   let name = Julie;
            ^

There appears to be an issue with the assignment statement. You might be able to see what it is, but let's inspect the error message anyway. Doing so will help us understand JavaScript errors more generally.

The message is:

::

   ReferenceError: Julie is not defined

Type of error is ``ReferenceError``. If we search the web for "js referenceerror" then one of the first results is the `MDN documentation for ReferenceError <https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ReferenceError>`_. The first sentence on this page is:

.. pull-quote:: The ``ReferenceError`` object represents an error when a non-existent variable is referenced.

This information, along with the rest of the message, "Julie is not defined," makes it clear what JavaScript is complaining about.

To us, the issue seems to be that we forgot to enclose the string ``Julie`` in quotes, but this is because we know that we intended to assign the variable ``name`` a string value. However, to JavaScript, there is nothing in the program to indicate that ``Julie`` should be a string. In fact, JavaScript sees ``Julie`` as a variable. Since there is not such defined variable in our program, it complains that there is a ``ReferenceError``. 

This is one of many examples of a situation in which that way we as humans describe an error is slightly different from the way JavaScript describes the same underlying error. It isn't that one description is more correct than the other, but that humans and computers view information differently. 
