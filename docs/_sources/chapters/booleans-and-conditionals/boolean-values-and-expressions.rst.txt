Booleans
========

.. index:: data type

One of the core features of any programming language is the ability to conditionally execute a segment of code. By this we mean that a program may run a segment of code *only if* a given condition is met, or if the program is in a particular state. 

.. todo:: consider examples using bank app or messaging app

.. admonition:: Example
   
   Consider a to-do list application that stores tasks along with their due dates and statuses (completed or uncompleted). The application may wish to notify the user that a task is due soon, but *only if* it has not already been completed.

In this example, we can phrase that condition as follows: Send a notification of an upcoming due date if the statement "the task is uncompleted" is true.

The JavaScript data type for storing true and false values is called ``boolean``, named after the British mathematician, George Boole. George Boole created `Boolean Algebra <https://en.wikipedia.org/wiki/Boolean_algebra>`_ which is the basis of all modern computer arithmetic.

.. index:: ! true, ! false, ! boolean

.. index::
   pair: boolean; value

Boolean Values
--------------

There are only two **boolean values**. They are ``true`` and ``false``. As always, JavaScript is case-sensitive, so ``True`` and ``False`` are not valid boolean values.

.. sourcecode:: js

    console.log(true)
    console.log(typeof true)
    console.log(typeof false)

**Output:**

::

   true
   boolean
   boolean

.. note:: 

    It is extremely important to realize that ``true`` and ``false`` are not strings. They are not surrounded by quotes. They are the only two values in the data type ``boolean``.

.. sourcecode:: js

   console.log(typeof true)
   console.log(typeof "true")

**Output:**

::

   boolean
   string

Boolean Expressions
-------------------

.. index::
   pair: boolean; expression

.. index::
   pair: operator; equality

A **boolean expression** is an expression that evaluates to a boolean value. The equality operator, ``==``, compares two values and produces a boolean value related to whether the two values are equal to one another.

.. sourcecode:: js

    console.log(5 == 5)
    console.log(5 == 6)

**Output:**

::

   true
   false

In the first statement, the two operands are equal, so the expression evaluates to ``true``. In the second statement, 5 is not equal to 6, so we get ``false``.

.. index::
   pair: operator; comparison

The ``==`` operator is one of six common **comparison operators**; the others are:

.. list-table:: Comparison Operators
   :widths: auto
   :header-rows: 1

   * - Operator
     - Description
     - Examples Returning ``true``
   * - Equal (``==``)
     - 
     - 
   * - Not equal(``!=``)
     - 
     - 
   * - Greater than (``>``)
     - 
     - 
   * - Less than (``<``)
     - 
     - 
   * - Greater than  (``>``)
     - 
     - 
   * - Greater than or equal (``>=``)
     - 
     - 
   * - Less than or equal (``<=``)
     - 
     - 


Although these operations are probably familiar to you, the JavaScript symbols are different from the mathematical symbols. A common error is to use a single equal sign (``=``) instead of a double equal sign (``==``). Remember that ``=`` is an *assignment* operator and ``==`` is a *comparison* operator. Also note that ``=<`` and ``=>`` are not recognized operators.

Note too that an equality test is symmetric, meaning that we can swap the places of the operands and the result is the same.  For example, if ``a == 7`` then ``7 == a``. However, an assignment statement is not symmetric: ``a = 7`` is legal while ``7 = a`` is not.


Check Your Understanding
------------------------

.. admonition:: Question

   Which of the following is a Boolean expression? Select all that apply.


   #. ``3 == 4``
   #. ``3 + 4``
   #. ``3 + 4 == 7``
   #. ``"false"``
   
   


